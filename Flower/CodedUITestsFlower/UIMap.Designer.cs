// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestsFlower
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLogged - Use 'Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams' to pass parameters into this method.
        /// </summary>
        public void Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLogged()
        {

            // Go to web page 'https://localhost:44336/' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams.UINowakartaInternetExpWindowUrl));
        }
        
        /// <summary>
        /// Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssert - Use 'Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssert()
        {
            #region Variable Declarations
            HtmlDiv uIWelcomestrangerPleasPane = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UIWelcomestrangerPleasPane;
            #endregion

            // Verify that the 'InnerText' property of 'Welcome stranger! Please log in, if y' pane contains 'Welcome stranger!'
            StringAssert.Contains(uIWelcomestrangerPleasPane.InnerText, this.Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues.UIWelcomestrangerPleasPaneInnerText);
        }
        
        /// <summary>
        /// GoToLoginPage - Use 'GoToLoginPageParams' to pass parameters into this method.
        /// </summary>
        public void GoToLoginPage()
        {
            #region Variable Declarations
            BrowserWindow uINowakartaInternetExpWindow = this.UINowakartaInternetExpWindow;
            HtmlHyperlink uILoginHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UILoginHyperlink;
            HtmlButton uILoginButton = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UILoginButton;
            #endregion

            // Go to web page 'about:NewsFeed' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.GoToLoginPageParams.UINowakartaInternetExpWindowUrl));

            // Go to web page 'https://localhost:44336/'
            uINowakartaInternetExpWindow.NavigateToUrl(new System.Uri(this.GoToLoginPageParams.UINowakartaInternetExpWindowUrl1));

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(52, 26));

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(37, 14));
        }
        
        /// <summary>
        /// EmailErrorAssert - Use 'EmailErrorAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void EmailErrorAssert()
        {
            #region Variable Declarations
            HtmlSpan uITheEmailfieldisrequiPane = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UITheEmailfieldisrequiPane;
            #endregion

            // Verify that the 'InnerText' property of 'The Email field is required.' pane equals 'The Email field is required.'
            Assert.AreEqual(this.EmailErrorAssertExpectedValues.UITheEmailfieldisrequiPaneInnerText, uITheEmailfieldisrequiPane.InnerText);
        }
        
        /// <summary>
        /// ClickLoginButton
        /// </summary>
        public void ClickLoginButton()
        {
            #region Variable Declarations
            HtmlButton uILoginButton = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UILoginButton;
            #endregion

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(29, 6));
        }
        
        /// <summary>
        /// InsertAdminCredentials - Use 'InsertAdminCredentialsParams' to pass parameters into this method.
        /// </summary>
        public void InsertAdminCredentials()
        {
            #region Variable Declarations
            HtmlEdit uIEmailEdit = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIPasswordEdit;
            #endregion

            // Type 'testtest@wp.pl' in 'Email' text box
            uIEmailEdit.Text = this.InsertAdminCredentialsParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.InsertAdminCredentialsParams.UIPasswordEditPassword;
        }
        
        /// <summary>
        /// WelcomeMessageContainsAfterLoginAssert - Use 'WelcomeMessageContainsAfterLoginAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void WelcomeMessageContainsAfterLoginAssert()
        {
            #region Variable Declarations
            HtmlDiv uIHurraLoggedastesttesPane = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UIHurraLoggedastesttesPane;
            #endregion

            // Verify that the 'InnerText' property of 'Hurra! Logged as testtest@wp.pl! N' pane contains 'Hurra!'
            StringAssert.Contains(uIHurraLoggedastesttesPane.InnerText, this.WelcomeMessageContainsAfterLoginAssertExpectedValues.UIHurraLoggedastesttesPaneInnerText);
        }
        
        /// <summary>
        /// GoToRegisterPageAndInsertInvalidPassword - Use 'GoToRegisterPageAndInsertInvalidPasswordParams' to pass parameters into this method.
        /// </summary>
        public void GoToRegisterPageAndInsertInvalidPassword()
        {
            #region Variable Declarations
            BrowserWindow uINowakartaInternetExpWindow = this.UINowakartaInternetExpWindow;
            HtmlHyperlink uIRegisterHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UIRegisterHyperlink;
            HtmlEdit uIEmailEdit = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIPasswordEdit;
            HtmlEdit uIConfirmPasswordEdit = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIConfirmPasswordEdit;
            HtmlButton uIRegisterButton = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIRegisterButton;
            #endregion

            // Go to web page 'about:NewsFeed' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.GoToRegisterPageAndInsertInvalidPasswordParams.UINowakartaInternetExpWindowUrl));

            // Go to web page 'https://localhost:44336/'
            uINowakartaInternetExpWindow.NavigateToUrl(new System.Uri(this.GoToRegisterPageAndInsertInvalidPasswordParams.UINowakartaInternetExpWindowUrl1));

            // Click 'Register' link
            Mouse.Click(uIRegisterHyperlink, new Point(37, 26));

            // Type 'tojuzostatniuser@wp.pl' in 'Email' text box
            uIEmailEdit.Text = this.GoToRegisterPageAndInsertInvalidPasswordParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.GoToRegisterPageAndInsertInvalidPasswordParams.UIPasswordEditPassword;

            // Type '********' in 'ConfirmPassword' text box
            uIConfirmPasswordEdit.Password = this.GoToRegisterPageAndInsertInvalidPasswordParams.UIConfirmPasswordEditPassword;

            // Click 'Register' button
            Mouse.Click(uIRegisterButton, new Point(40, 15));
        }
        
        /// <summary>
        /// InvalidPasswordErrorsCountAssert - Use 'InvalidPasswordErrorsCountAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void InvalidPasswordErrorsCountAssert()
        {
            #region Variable Declarations
            HtmlCustom uIItemCustom = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIItemCustom;
            #endregion

            // Verify that the 'TagInstance' property of custom control equals '3'
            Assert.AreEqual(this.InvalidPasswordErrorsCountAssertExpectedValues.UIItemCustomTagInstance, uIItemCustom.TagInstance);
        }
        
        /// <summary>
        /// InsertProperRegisterValues - Use 'InsertProperRegisterValuesParams' to pass parameters into this method.
        /// </summary>
        public void InsertProperRegisterValues()
        {
            #region Variable Declarations
            HtmlHyperlink uIRegisterHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UIRegisterHyperlink;
            HtmlEdit uIEmailEdit = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIPasswordEdit;
            HtmlEdit uIConfirmPasswordEdit = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIConfirmPasswordEdit;
            HtmlButton uIRegisterButton = this.UINowakartaInternetExpWindow.UIRegisterFlowerDocument.UIRegisterButton;
            #endregion

            // Go to web page 'https://localhost:44336/' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.InsertProperRegisterValuesParams.UINowakartaInternetExpWindowUrl));

            // Click 'Register' link
            Mouse.Click(uIRegisterHyperlink, new Point(59, 30));

            // Type 'tojuzzdecydowanieostatniuser@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.InsertProperRegisterValuesParams.UIEmailEditText;

            // Type '{Tab}' in 'Email' text box
            Keyboard.SendKeys(uIEmailEdit, this.InsertProperRegisterValuesParams.UIEmailEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.InsertProperRegisterValuesParams.UIPasswordEditPassword;

            // Type '{Tab}' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.InsertProperRegisterValuesParams.UIPasswordEditSendKeys, ModifierKeys.None);

            // Type '********' in 'ConfirmPassword' text box
            uIConfirmPasswordEdit.Password = this.InsertProperRegisterValuesParams.UIConfirmPasswordEditPassword;

            // Click 'Register' button
            Mouse.Click(uIRegisterButton, new Point(57, 14));
        }
        
        /// <summary>
        /// RecentRegisteredUserLoginAssert - Use 'RecentRegisteredUserLoginAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void RecentRegisteredUserLoginAssert()
        {
            #region Variable Declarations
            HtmlDiv uIHurraLoggedastojuzzdPane = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UIHurraLoggedastojuzzdPane;
            #endregion

            // Verify that the 'InnerText' property of 'Hurra! Logged as tojuzzdecydowanieost' pane contains 'tojuzzdecydowanieostatniuser@gmail.com'
            StringAssert.Contains(uIHurraLoggedastojuzzdPane.InnerText, this.RecentRegisteredUserLoginAssertExpectedValues.UIHurraLoggedastojuzzdPaneInnerText);
        }
        
        /// <summary>
        /// LoginAsNormalUser - Use 'LoginAsNormalUserParams' to pass parameters into this method.
        /// </summary>
        public void LoginAsNormalUser()
        {
            #region Variable Declarations
            HtmlDiv uIMaincontentPane = this.UINowakartaInternetExpWindow.UINowakartaDocument.UIMaincontentPane;
            HtmlCustom uIJstopsitesCustom = this.UINowakartaInternetExpWindow.UINowakartaDocument.UIJstopsitesCustom;
            HtmlDiv uINajpopularniejszestrPane = this.UINowakartaInternetExpWindow.UINowakartaDocument.UISectionappstopsiteshCustom.UINajpopularniejszestrPane;
            BrowserWindow uINowakartaInternetExpWindow = this.UINowakartaInternetExpWindow;
            HtmlHyperlink uILoginHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit1 = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIEmailEdit1;
            HtmlEdit uIPasswordEdit1 = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIPasswordEdit1;
            HtmlButton uILoginButton = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UILoginButton;
            #endregion

            // Go to web page 'about:NewsFeed' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.LoginAsNormalUserParams.UINowakartaInternetExpWindowUrl));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'maincontent' pane at (1, 1)
            Mouse.Hover(uIMaincontentPane, new Point(1, 1));

            // Mouse hover 'js-topsites' custom control at (1, 1)
            Mouse.Hover(uIJstopsitesCustom, new Point(1, 1));

            // Mouse hover 'Najpopularniejsze strony Ukryj kanał' pane at (1, 1)
            Mouse.Hover(uINajpopularniejszestrPane, new Point(1, 1));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Go to web page 'https://localhost:44336/'
            uINowakartaInternetExpWindow.NavigateToUrl(new System.Uri(this.LoginAsNormalUserParams.UINowakartaInternetExpWindowUrl1));

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(35, 28));

            // Type 'useruser@wp.pl' in 'Email' text box
            uIEmailEdit1.Text = this.LoginAsNormalUserParams.UIEmailEdit1Text;

            // Type '{Tab}' in 'Email' text box
            Keyboard.SendKeys(uIEmailEdit1, this.LoginAsNormalUserParams.UIEmailEdit1SendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit1.Password = this.LoginAsNormalUserParams.UIPasswordEdit1Password;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(51, 14));
        }
        
        /// <summary>
        /// ClickOnSellersTab
        /// </summary>
        public void ClickOnSellersTab()
        {
            #region Variable Declarations
            HtmlHyperlink uISellersHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UISellersHyperlink;
            #endregion

            // Click 'Sellers' link
            Mouse.Click(uISellersHyperlink, new Point(45, 29));
        }
        
        /// <summary>
        /// AccessDeniedAssert - Use 'AccessDeniedAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AccessDeniedAssert()
        {
            #region Variable Declarations
            HtmlCustom uIItemCustom = this.UIAccessdeniedFlowerInWindow.UIAccessdeniedFlowerDocument.UIItemCustom;
            #endregion

            // Verify that the 'InnerText' property of custom control contains 'Access denied'
            StringAssert.Contains(uIItemCustom.InnerText, this.AccessDeniedAssertExpectedValues.UIItemCustomInnerText);
        }
        
        /// <summary>
        /// ClickCustomerAndInputStringIntoSearchString - Use 'ClickCustomerAndInputStringIntoSearchStringParams' to pass parameters into this method.
        /// </summary>
        public void ClickCustomerAndInputStringIntoSearchString()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UICustomersHyperlink;
            HtmlEdit uISearchStringEdit = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UISearchStringEdit;
            HtmlInputButton uISearchButton = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UISearchButton;
            #endregion

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(75, 24));

            // Type 'gol' in 'SearchString' text box
            uISearchStringEdit.Text = this.ClickCustomerAndInputStringIntoSearchStringParams.UISearchStringEditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(44, 20));
        }
        
        /// <summary>
        /// FirstTableItemContainsProperString - Use 'FirstTableItemContainsProperStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FirstTableItemContainsProperString()
        {
            #region Variable Declarations
            HtmlCell uIGolonkaCell = this.UICustomersFlowerInterWindow.UICustomersFlowerDocument.UIItemTable.UIGolonkaCell;
            #endregion

            // Verify that the 'InnerText' property of 'Golonka' cell contains 'Gol'
            StringAssert.Contains(uIGolonkaCell.InnerText, this.FirstTableItemContainsProperStringExpectedValues.UIGolonkaCellInnerText);
        }
        
        /// <summary>
        /// GoToCustomerPageAndInsertWrongString - Use 'GoToCustomerPageAndInsertWrongStringParams' to pass parameters into this method.
        /// </summary>
        public void GoToCustomerPageAndInsertWrongString()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UICustomersHyperlink;
            HtmlEdit uISearchStringEdit = this.UICustomersFlowerInterWindow1.UICustomersFlowerDocument.UISearchStringEdit;
            HtmlInputButton uISearchButton = this.UICustomersFlowerInterWindow1.UICustomersFlowerDocument.UISearchButton;
            #endregion

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(49, 24));

            // Type 'niema' in 'SearchString' text box
            uISearchStringEdit.Text = this.GoToCustomerPageAndInsertWrongStringParams.UISearchStringEditText;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(46, 20));
        }
        
        /// <summary>
        /// GoToCustomerPage
        /// </summary>
        public void GoToCustomerPage()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UICustomersHyperlink;
            #endregion

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(37, 29));
        }
        
        /// <summary>
        /// LoginAsAdmin - Use 'LoginAsAdminParams' to pass parameters into this method.
        /// </summary>
        public void LoginAsAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit1 = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIEmailEdit1;
            HtmlEdit uIPasswordEdit1 = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIPasswordEdit1;
            HtmlButton uILoginButton = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UILoginButton;
            #endregion

            // Go to web page 'https://localhost:44336/' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.LoginAsAdminParams.UINowakartaInternetExpWindowUrl));

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(41, 26));

            // Type 'testtest@wp.pl' in 'Email' text box
            uIEmailEdit1.Text = this.LoginAsAdminParams.UIEmailEdit1Text;

            // Type '{Tab}' in 'Email' text box
            Keyboard.SendKeys(uIEmailEdit1, this.LoginAsAdminParams.UIEmailEdit1SendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit1.Password = this.LoginAsAdminParams.UIPasswordEdit1Password;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(17, 12));
        }
        
        /// <summary>
        /// CustomersTableContainsProperButtons - Use 'CustomersTableContainsProperButtonsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CustomersTableContainsProperButtons()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UIEditHyperlink;
            #endregion

            // Verify that the 'Id' property of 'Edit' link equals 'EditButton'
            Assert.AreEqual(this.CustomersTableContainsProperButtonsExpectedValues.UIEditHyperlinkId, uIEditHyperlink.Id);
        }
        
        /// <summary>
        /// TableHasProperButtons - Use 'TableHasProperButtonsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TableHasProperButtons()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UIEditHyperlink;
            #endregion

            // Verify that the 'Id' property of 'Edit' link equals 'EditButton'
            Assert.AreEqual(this.TableHasProperButtonsExpectedValues.UIEditHyperlinkId, uIEditHyperlink.Id);
        }
        
        /// <summary>
        /// ProperButtonsAssert - Use 'ProperButtonsAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ProperButtonsAssert()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UIEditHyperlink;
            HtmlHyperlink uIDetailsHyperlink = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UIDetailsHyperlink;
            HtmlHyperlink uIDeleteHyperlink = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UIDeleteHyperlink;
            #endregion

            // Verify that the 'Id' property of 'Edit' link equals 'EditButton'
            Assert.AreEqual(this.ProperButtonsAssertExpectedValues.UIEditHyperlinkId, uIEditHyperlink.Id);

            // Verify that the 'Id' property of 'Details' link equals 'DetailsButton'
            Assert.AreEqual(this.ProperButtonsAssertExpectedValues.UIDetailsHyperlinkId, uIDetailsHyperlink.Id);

            // Verify that the 'Id' property of 'Delete' link equals 'DeleteButton'
            Assert.AreEqual(this.ProperButtonsAssertExpectedValues.UIDeleteHyperlinkId, uIDeleteHyperlink.Id);

            // Verify that the 'Id' property of 'Delete' link equals 'DeleteButton'
            Assert.AreEqual(this.ProperButtonsAssertExpectedValues.UIDeleteHyperlinkId1, uIDeleteHyperlink.Id);
        }
        
        /// <summary>
        /// GoToDetailsPage
        /// </summary>
        public void GoToDetailsPage()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UINowakartaInternetExpWindow.UICustomersFlowerDocument.UIDetailsHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(32, 0));
        }
        
        /// <summary>
        /// DetailsViewHasProperValuesAssert - Use 'DetailsViewHasProperValuesAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DetailsViewHasProperValuesAssert()
        {
            #region Variable Declarations
            HtmlCustom uIMariaCustom = this.UIDetailsFlowerInterneWindow.UIDetailsFlowerDocument.UIMariaCustom;
            HtmlCustom uIKlimekCustom = this.UIDetailsFlowerInterneWindow.UIDetailsFlowerDocument.UIKlimekCustom;
            #endregion

            // Verify that the 'InnerText' property of 'Maria' custom control equals 'Maria '
            Assert.AreEqual(this.DetailsViewHasProperValuesAssertExpectedValues.UIMariaCustomInnerText, uIMariaCustom.InnerText);

            // Verify that the 'InnerText' property of 'Klimek' custom control equals 'Klimek '
            Assert.AreEqual(this.DetailsViewHasProperValuesAssertExpectedValues.UIKlimekCustomInnerText, uIKlimekCustom.InnerText);
        }
        
        /// <summary>
        /// GoToProductsPageWhenNotLogged - Use 'GoToProductsPageWhenNotLoggedParams' to pass parameters into this method.
        /// </summary>
        public void GoToProductsPageWhenNotLogged()
        {
            #region Variable Declarations
            HtmlHyperlink uIProductsHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UIProductsHyperlink;
            #endregion

            // Go to web page 'https://localhost:44336/' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.GoToProductsPageWhenNotLoggedParams.UINowakartaInternetExpWindowUrl));

            // Click 'Products' link
            Mouse.Click(uIProductsHyperlink, new Point(22, 22));
        }
        
        /// <summary>
        /// ProductsViewHasProperTitle - Use 'ProductsViewHasProperTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ProductsViewHasProperTitle()
        {
            #region Variable Declarations
            HtmlDiv uIProductsNamePriceQuaPane = this.UIProductsFlowerInternWindow.UIProductsFlowerDocument.UIProductsNamePriceQuaPane;
            #endregion

            // Verify that the 'InnerText' property of 'Products Name Price Quantit' pane contains 'Products'
            StringAssert.Contains(uIProductsNamePriceQuaPane.InnerText, this.ProductsViewHasProperTitleExpectedValues.UIProductsNamePriceQuaPaneInnerText);
        }
        
        /// <summary>
        /// GoToCustomerPageWhenNotLogged - Use 'GoToCustomerPageWhenNotLoggedParams' to pass parameters into this method.
        /// </summary>
        public void GoToCustomerPageWhenNotLogged()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UICustomersHyperlink;
            #endregion

            // Go to web page 'https://localhost:44336/' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.GoToCustomerPageWhenNotLoggedParams.UINowakartaInternetExpWindowUrl));

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(49, 28));
        }
        
        /// <summary>
        /// LoginTitleAssert - Use 'LoginTitleAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LoginTitleAssert()
        {
            #region Variable Declarations
            HtmlDiv uILoginUsealocalaccounPane = this.UINowakartaInternetExpWindow.UILoginFlowerDocument1.UILoginUsealocalaccounPane;
            #endregion

            // Verify that the 'InnerText' property of 'Log in Use a local account to' pane contains 'Log in'
            StringAssert.Contains(uILoginUsealocalaccounPane.InnerText, this.LoginTitleAssertExpectedValues.UILoginUsealocalaccounPaneInnerText);
        }
        
        /// <summary>
        /// LogOut
        /// </summary>
        public void LogOut()
        {
            #region Variable Declarations
            HtmlButton uILogoutButton = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UILogoutFormCustom.UILogoutButton;
            #endregion

            // Click 'Log out' button
            Mouse.Click(uILogoutButton, new Point(34, 16));
        }
        
        /// <summary>
        /// DoEverything - Use 'DoEverythingParams' to pass parameters into this method.
        /// </summary>
        public void DoEverything()
        {
            #region Variable Declarations
            HtmlCustom uIJstopsitesCustom = this.UINowakartaInternetExpWindow.UINowakartaDocument.UIJstopsitesCustom;
            BrowserWindow uINowakartaInternetExpWindow = this.UINowakartaInternetExpWindow;
            HtmlHyperlink uILoginHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit1 = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIEmailEdit1;
            HtmlEdit uIPasswordEdit1 = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UIPasswordEdit1;
            HtmlButton uILoginButton = this.UINowakartaInternetExpWindow.UILoginFlowerDocument.UILoginButton;
            HtmlHyperlink uICustomersHyperlink = this.UINowakartaInternetExpWindow.UIFlowerShopFlowerDocument.UICustomersHyperlink;
            #endregion

            // Go to web page 'about:NewsFeed' using new browser instance
            this.UINowakartaInternetExpWindow.LaunchUrl(new System.Uri(this.DoEverythingParams.UINowakartaInternetExpWindowUrl));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'js-topsites' custom control at (1, 1)
            Mouse.Hover(uIJstopsitesCustom, new Point(1, 1));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Go to web page 'https://localhost:44336/'
            uINowakartaInternetExpWindow.NavigateToUrl(new System.Uri(this.DoEverythingParams.UINowakartaInternetExpWindowUrl1));

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(38, 32));

            // Type 'testtest@wp.pl' in 'Email' text box
            uIEmailEdit1.Text = this.DoEverythingParams.UIEmailEdit1Text;

            // Type '{Tab}' in 'Email' text box
            Keyboard.SendKeys(uIEmailEdit1, this.DoEverythingParams.UIEmailEdit1SendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit1.Password = this.DoEverythingParams.UIPasswordEdit1Password;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(8, 16));

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(50, 29));
        }
        
        #region Properties
        public virtual Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams
        {
            get
            {
                if ((this.mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams == null))
                {
                    this.mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams = new Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams();
                }
                return this.mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams;
            }
        }
        
        public virtual Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues
        {
            get
            {
                if ((this.mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues == null))
                {
                    this.mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues = new Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues();
                }
                return this.mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues;
            }
        }
        
        public virtual GoToLoginPageParams GoToLoginPageParams
        {
            get
            {
                if ((this.mGoToLoginPageParams == null))
                {
                    this.mGoToLoginPageParams = new GoToLoginPageParams();
                }
                return this.mGoToLoginPageParams;
            }
        }
        
        public virtual EmailErrorAssertExpectedValues EmailErrorAssertExpectedValues
        {
            get
            {
                if ((this.mEmailErrorAssertExpectedValues == null))
                {
                    this.mEmailErrorAssertExpectedValues = new EmailErrorAssertExpectedValues();
                }
                return this.mEmailErrorAssertExpectedValues;
            }
        }
        
        public virtual InsertAdminCredentialsParams InsertAdminCredentialsParams
        {
            get
            {
                if ((this.mInsertAdminCredentialsParams == null))
                {
                    this.mInsertAdminCredentialsParams = new InsertAdminCredentialsParams();
                }
                return this.mInsertAdminCredentialsParams;
            }
        }
        
        public virtual WelcomeMessageContainsAfterLoginAssertExpectedValues WelcomeMessageContainsAfterLoginAssertExpectedValues
        {
            get
            {
                if ((this.mWelcomeMessageContainsAfterLoginAssertExpectedValues == null))
                {
                    this.mWelcomeMessageContainsAfterLoginAssertExpectedValues = new WelcomeMessageContainsAfterLoginAssertExpectedValues();
                }
                return this.mWelcomeMessageContainsAfterLoginAssertExpectedValues;
            }
        }
        
        public virtual GoToRegisterPageAndInsertInvalidPasswordParams GoToRegisterPageAndInsertInvalidPasswordParams
        {
            get
            {
                if ((this.mGoToRegisterPageAndInsertInvalidPasswordParams == null))
                {
                    this.mGoToRegisterPageAndInsertInvalidPasswordParams = new GoToRegisterPageAndInsertInvalidPasswordParams();
                }
                return this.mGoToRegisterPageAndInsertInvalidPasswordParams;
            }
        }
        
        public virtual InvalidPasswordErrorsCountAssertExpectedValues InvalidPasswordErrorsCountAssertExpectedValues
        {
            get
            {
                if ((this.mInvalidPasswordErrorsCountAssertExpectedValues == null))
                {
                    this.mInvalidPasswordErrorsCountAssertExpectedValues = new InvalidPasswordErrorsCountAssertExpectedValues();
                }
                return this.mInvalidPasswordErrorsCountAssertExpectedValues;
            }
        }
        
        public virtual InsertProperRegisterValuesParams InsertProperRegisterValuesParams
        {
            get
            {
                if ((this.mInsertProperRegisterValuesParams == null))
                {
                    this.mInsertProperRegisterValuesParams = new InsertProperRegisterValuesParams();
                }
                return this.mInsertProperRegisterValuesParams;
            }
        }
        
        public virtual RecentRegisteredUserLoginAssertExpectedValues RecentRegisteredUserLoginAssertExpectedValues
        {
            get
            {
                if ((this.mRecentRegisteredUserLoginAssertExpectedValues == null))
                {
                    this.mRecentRegisteredUserLoginAssertExpectedValues = new RecentRegisteredUserLoginAssertExpectedValues();
                }
                return this.mRecentRegisteredUserLoginAssertExpectedValues;
            }
        }
        
        public virtual LoginAsNormalUserParams LoginAsNormalUserParams
        {
            get
            {
                if ((this.mLoginAsNormalUserParams == null))
                {
                    this.mLoginAsNormalUserParams = new LoginAsNormalUserParams();
                }
                return this.mLoginAsNormalUserParams;
            }
        }
        
        public virtual AccessDeniedAssertExpectedValues AccessDeniedAssertExpectedValues
        {
            get
            {
                if ((this.mAccessDeniedAssertExpectedValues == null))
                {
                    this.mAccessDeniedAssertExpectedValues = new AccessDeniedAssertExpectedValues();
                }
                return this.mAccessDeniedAssertExpectedValues;
            }
        }
        
        public virtual ClickCustomerAndInputStringIntoSearchStringParams ClickCustomerAndInputStringIntoSearchStringParams
        {
            get
            {
                if ((this.mClickCustomerAndInputStringIntoSearchStringParams == null))
                {
                    this.mClickCustomerAndInputStringIntoSearchStringParams = new ClickCustomerAndInputStringIntoSearchStringParams();
                }
                return this.mClickCustomerAndInputStringIntoSearchStringParams;
            }
        }
        
        public virtual FirstTableItemContainsProperStringExpectedValues FirstTableItemContainsProperStringExpectedValues
        {
            get
            {
                if ((this.mFirstTableItemContainsProperStringExpectedValues == null))
                {
                    this.mFirstTableItemContainsProperStringExpectedValues = new FirstTableItemContainsProperStringExpectedValues();
                }
                return this.mFirstTableItemContainsProperStringExpectedValues;
            }
        }
        
        public virtual GoToCustomerPageAndInsertWrongStringParams GoToCustomerPageAndInsertWrongStringParams
        {
            get
            {
                if ((this.mGoToCustomerPageAndInsertWrongStringParams == null))
                {
                    this.mGoToCustomerPageAndInsertWrongStringParams = new GoToCustomerPageAndInsertWrongStringParams();
                }
                return this.mGoToCustomerPageAndInsertWrongStringParams;
            }
        }
        
        public virtual LoginAsAdminParams LoginAsAdminParams
        {
            get
            {
                if ((this.mLoginAsAdminParams == null))
                {
                    this.mLoginAsAdminParams = new LoginAsAdminParams();
                }
                return this.mLoginAsAdminParams;
            }
        }
        
        public virtual CustomersTableContainsProperButtonsExpectedValues CustomersTableContainsProperButtonsExpectedValues
        {
            get
            {
                if ((this.mCustomersTableContainsProperButtonsExpectedValues == null))
                {
                    this.mCustomersTableContainsProperButtonsExpectedValues = new CustomersTableContainsProperButtonsExpectedValues();
                }
                return this.mCustomersTableContainsProperButtonsExpectedValues;
            }
        }
        
        public virtual TableHasProperButtonsExpectedValues TableHasProperButtonsExpectedValues
        {
            get
            {
                if ((this.mTableHasProperButtonsExpectedValues == null))
                {
                    this.mTableHasProperButtonsExpectedValues = new TableHasProperButtonsExpectedValues();
                }
                return this.mTableHasProperButtonsExpectedValues;
            }
        }
        
        public virtual ProperButtonsAssertExpectedValues ProperButtonsAssertExpectedValues
        {
            get
            {
                if ((this.mProperButtonsAssertExpectedValues == null))
                {
                    this.mProperButtonsAssertExpectedValues = new ProperButtonsAssertExpectedValues();
                }
                return this.mProperButtonsAssertExpectedValues;
            }
        }
        
        public virtual DetailsViewHasProperValuesAssertExpectedValues DetailsViewHasProperValuesAssertExpectedValues
        {
            get
            {
                if ((this.mDetailsViewHasProperValuesAssertExpectedValues == null))
                {
                    this.mDetailsViewHasProperValuesAssertExpectedValues = new DetailsViewHasProperValuesAssertExpectedValues();
                }
                return this.mDetailsViewHasProperValuesAssertExpectedValues;
            }
        }
        
        public virtual GoToProductsPageWhenNotLoggedParams GoToProductsPageWhenNotLoggedParams
        {
            get
            {
                if ((this.mGoToProductsPageWhenNotLoggedParams == null))
                {
                    this.mGoToProductsPageWhenNotLoggedParams = new GoToProductsPageWhenNotLoggedParams();
                }
                return this.mGoToProductsPageWhenNotLoggedParams;
            }
        }
        
        public virtual ProductsViewHasProperTitleExpectedValues ProductsViewHasProperTitleExpectedValues
        {
            get
            {
                if ((this.mProductsViewHasProperTitleExpectedValues == null))
                {
                    this.mProductsViewHasProperTitleExpectedValues = new ProductsViewHasProperTitleExpectedValues();
                }
                return this.mProductsViewHasProperTitleExpectedValues;
            }
        }
        
        public virtual GoToCustomerPageWhenNotLoggedParams GoToCustomerPageWhenNotLoggedParams
        {
            get
            {
                if ((this.mGoToCustomerPageWhenNotLoggedParams == null))
                {
                    this.mGoToCustomerPageWhenNotLoggedParams = new GoToCustomerPageWhenNotLoggedParams();
                }
                return this.mGoToCustomerPageWhenNotLoggedParams;
            }
        }
        
        public virtual LoginTitleAssertExpectedValues LoginTitleAssertExpectedValues
        {
            get
            {
                if ((this.mLoginTitleAssertExpectedValues == null))
                {
                    this.mLoginTitleAssertExpectedValues = new LoginTitleAssertExpectedValues();
                }
                return this.mLoginTitleAssertExpectedValues;
            }
        }
        
        public virtual DoEverythingParams DoEverythingParams
        {
            get
            {
                if ((this.mDoEverythingParams == null))
                {
                    this.mDoEverythingParams = new DoEverythingParams();
                }
                return this.mDoEverythingParams;
            }
        }
        
        public UINowakartaInternetExpWindow UINowakartaInternetExpWindow
        {
            get
            {
                if ((this.mUINowakartaInternetExpWindow == null))
                {
                    this.mUINowakartaInternetExpWindow = new UINowakartaInternetExpWindow();
                }
                return this.mUINowakartaInternetExpWindow;
            }
        }
        
        public UIAccessdeniedFlowerInWindow UIAccessdeniedFlowerInWindow
        {
            get
            {
                if ((this.mUIAccessdeniedFlowerInWindow == null))
                {
                    this.mUIAccessdeniedFlowerInWindow = new UIAccessdeniedFlowerInWindow();
                }
                return this.mUIAccessdeniedFlowerInWindow;
            }
        }
        
        public UICustomersFlowerInterWindow UICustomersFlowerInterWindow
        {
            get
            {
                if ((this.mUICustomersFlowerInterWindow == null))
                {
                    this.mUICustomersFlowerInterWindow = new UICustomersFlowerInterWindow();
                }
                return this.mUICustomersFlowerInterWindow;
            }
        }
        
        public UICustomersFlowerInterWindow1 UICustomersFlowerInterWindow1
        {
            get
            {
                if ((this.mUICustomersFlowerInterWindow1 == null))
                {
                    this.mUICustomersFlowerInterWindow1 = new UICustomersFlowerInterWindow1();
                }
                return this.mUICustomersFlowerInterWindow1;
            }
        }
        
        public UIDetailsFlowerInterneWindow UIDetailsFlowerInterneWindow
        {
            get
            {
                if ((this.mUIDetailsFlowerInterneWindow == null))
                {
                    this.mUIDetailsFlowerInterneWindow = new UIDetailsFlowerInterneWindow();
                }
                return this.mUIDetailsFlowerInterneWindow;
            }
        }
        
        public UIProductsFlowerInternWindow UIProductsFlowerInternWindow
        {
            get
            {
                if ((this.mUIProductsFlowerInternWindow == null))
                {
                    this.mUIProductsFlowerInternWindow = new UIProductsFlowerInternWindow();
                }
                return this.mUIProductsFlowerInternWindow;
            }
        }
        #endregion
        
        #region Fields
        private Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams;
        
        private Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues mCheck_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues;
        
        private GoToLoginPageParams mGoToLoginPageParams;
        
        private EmailErrorAssertExpectedValues mEmailErrorAssertExpectedValues;
        
        private InsertAdminCredentialsParams mInsertAdminCredentialsParams;
        
        private WelcomeMessageContainsAfterLoginAssertExpectedValues mWelcomeMessageContainsAfterLoginAssertExpectedValues;
        
        private GoToRegisterPageAndInsertInvalidPasswordParams mGoToRegisterPageAndInsertInvalidPasswordParams;
        
        private InvalidPasswordErrorsCountAssertExpectedValues mInvalidPasswordErrorsCountAssertExpectedValues;
        
        private InsertProperRegisterValuesParams mInsertProperRegisterValuesParams;
        
        private RecentRegisteredUserLoginAssertExpectedValues mRecentRegisteredUserLoginAssertExpectedValues;
        
        private LoginAsNormalUserParams mLoginAsNormalUserParams;
        
        private AccessDeniedAssertExpectedValues mAccessDeniedAssertExpectedValues;
        
        private ClickCustomerAndInputStringIntoSearchStringParams mClickCustomerAndInputStringIntoSearchStringParams;
        
        private FirstTableItemContainsProperStringExpectedValues mFirstTableItemContainsProperStringExpectedValues;
        
        private GoToCustomerPageAndInsertWrongStringParams mGoToCustomerPageAndInsertWrongStringParams;
        
        private LoginAsAdminParams mLoginAsAdminParams;
        
        private CustomersTableContainsProperButtonsExpectedValues mCustomersTableContainsProperButtonsExpectedValues;
        
        private TableHasProperButtonsExpectedValues mTableHasProperButtonsExpectedValues;
        
        private ProperButtonsAssertExpectedValues mProperButtonsAssertExpectedValues;
        
        private DetailsViewHasProperValuesAssertExpectedValues mDetailsViewHasProperValuesAssertExpectedValues;
        
        private GoToProductsPageWhenNotLoggedParams mGoToProductsPageWhenNotLoggedParams;
        
        private ProductsViewHasProperTitleExpectedValues mProductsViewHasProperTitleExpectedValues;
        
        private GoToCustomerPageWhenNotLoggedParams mGoToCustomerPageWhenNotLoggedParams;
        
        private LoginTitleAssertExpectedValues mLoginTitleAssertExpectedValues;
        
        private DoEverythingParams mDoEverythingParams;
        
        private UINowakartaInternetExpWindow mUINowakartaInternetExpWindow;
        
        private UIAccessdeniedFlowerInWindow mUIAccessdeniedFlowerInWindow;
        
        private UICustomersFlowerInterWindow mUICustomersFlowerInterWindow;
        
        private UICustomersFlowerInterWindow1 mUICustomersFlowerInterWindow1;
        
        private UIDetailsFlowerInterneWindow mUIDetailsFlowerInterneWindow;
        
        private UIProductsFlowerInternWindow mUIProductsFlowerInternWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLogged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://localhost:44336/' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "https://localhost:44336/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Check_HomeViewPartial_ShouldContainProperInformationWhenUserIsNotLoggedAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Welcome stranger! Please log in, if y' pane contains 'Welcome stranger!'
        /// </summary>
        public string UIWelcomestrangerPleasPaneInnerText = "Welcome stranger!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToLoginPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class GoToLoginPageParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'about:NewsFeed' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "about:NewsFeed";
        
        /// <summary>
        /// Go to web page 'https://localhost:44336/'
        /// </summary>
        public string UINowakartaInternetExpWindowUrl1 = "https://localhost:44336/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EmailErrorAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EmailErrorAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'The Email field is required.' pane equals 'The Email field is required.'
        /// </summary>
        public string UITheEmailfieldisrequiPaneInnerText = "The Email field is required.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertAdminCredentials'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InsertAdminCredentialsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'testtest@wp.pl' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "testtest@wp.pl";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "2i0aJgnclXUV3DmV4e4O7xW5BU5jtb2z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'WelcomeMessageContainsAfterLoginAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class WelcomeMessageContainsAfterLoginAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Hurra! Logged as testtest@wp.pl! N' pane contains 'Hurra!'
        /// </summary>
        public string UIHurraLoggedastesttesPaneInnerText = "Hurra!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToRegisterPageAndInsertInvalidPassword'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class GoToRegisterPageAndInsertInvalidPasswordParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'about:NewsFeed' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "about:NewsFeed";
        
        /// <summary>
        /// Go to web page 'https://localhost:44336/'
        /// </summary>
        public string UINowakartaInternetExpWindowUrl1 = "https://localhost:44336/";
        
        /// <summary>
        /// Type 'tojuzostatniuser@wp.pl' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "tojuzostatniuser@wp.pl";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "eq6zGt/6HXRhC0DyrTDmFAAjlM+QTMAc";
        
        /// <summary>
        /// Type '********' in 'ConfirmPassword' text box
        /// </summary>
        public string UIConfirmPasswordEditPassword = "eq6zGt/6HXRhC0DyrTDmFAAjlM+QTMAc";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidPasswordErrorsCountAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InvalidPasswordErrorsCountAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagInstance' property of custom control equals '3'
        /// </summary>
        public int UIItemCustomTagInstance = 3;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InsertProperRegisterValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InsertProperRegisterValuesParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://localhost:44336/' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "https://localhost:44336/";
        
        /// <summary>
        /// Type 'tojuzzdecydowanieostatniuser@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "tojuzzdecydowanieostatniuser@gmail.com";
        
        /// <summary>
        /// Type '{Tab}' in 'Email' text box
        /// </summary>
        public string UIEmailEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "mBQq9cL71wNqdUFlzScttqVjjIlghGPw+ED9kXC/UuI=";
        
        /// <summary>
        /// Type '{Tab}' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'ConfirmPassword' text box
        /// </summary>
        public string UIConfirmPasswordEditPassword = "mBQq9cL71wNqdUFlzScttqVjjIlghGPw+ED9kXC/UuI=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecentRegisteredUserLoginAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecentRegisteredUserLoginAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Hurra! Logged as tojuzzdecydowanieost' pane contains 'tojuzzdecydowanieostatniuser@gmail.com'
        /// </summary>
        public string UIHurraLoggedastojuzzdPaneInnerText = "tojuzzdecydowanieostatniuser@gmail.com";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginAsNormalUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginAsNormalUserParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'about:NewsFeed' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "about:NewsFeed";
        
        /// <summary>
        /// Go to web page 'https://localhost:44336/'
        /// </summary>
        public string UINowakartaInternetExpWindowUrl1 = "https://localhost:44336/";
        
        /// <summary>
        /// Type 'useruser@wp.pl' in 'Email' text box
        /// </summary>
        public string UIEmailEdit1Text = "useruser@wp.pl";
        
        /// <summary>
        /// Type '{Tab}' in 'Email' text box
        /// </summary>
        public string UIEmailEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEdit1Password = "D+09+T8RTt6HfLgKVLDhnZrNm4cWasvN";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AccessDeniedAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AccessDeniedAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of custom control contains 'Access denied'
        /// </summary>
        public string UIItemCustomInnerText = "Access denied";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickCustomerAndInputStringIntoSearchString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ClickCustomerAndInputStringIntoSearchStringParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'gol' in 'SearchString' text box
        /// </summary>
        public string UISearchStringEditText = "gol";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FirstTableItemContainsProperString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class FirstTableItemContainsProperStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Golonka' cell contains 'Gol'
        /// </summary>
        public string UIGolonkaCellInnerText = "Gol";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToCustomerPageAndInsertWrongString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class GoToCustomerPageAndInsertWrongStringParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'niema' in 'SearchString' text box
        /// </summary>
        public string UISearchStringEditText = "niema";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginAsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginAsAdminParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://localhost:44336/' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "https://localhost:44336/";
        
        /// <summary>
        /// Type 'testtest@wp.pl' in 'Email' text box
        /// </summary>
        public string UIEmailEdit1Text = "testtest@wp.pl";
        
        /// <summary>
        /// Type '{Tab}' in 'Email' text box
        /// </summary>
        public string UIEmailEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEdit1Password = "2i0aJgnclXUV3DmV4e4O7xW5BU5jtb2z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CustomersTableContainsProperButtons'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CustomersTableContainsProperButtonsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Id' property of 'Edit' link equals 'EditButton'
        /// </summary>
        public string UIEditHyperlinkId = "EditButton";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TableHasProperButtons'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TableHasProperButtonsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Id' property of 'Edit' link equals 'EditButton'
        /// </summary>
        public string UIEditHyperlinkId = "EditButton";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ProperButtonsAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ProperButtonsAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Id' property of 'Edit' link equals 'EditButton'
        /// </summary>
        public string UIEditHyperlinkId = "EditButton";
        
        /// <summary>
        /// Verify that the 'Id' property of 'Details' link equals 'DetailsButton'
        /// </summary>
        public string UIDetailsHyperlinkId = "DetailsButton";
        
        /// <summary>
        /// Verify that the 'Id' property of 'Delete' link equals 'DeleteButton'
        /// </summary>
        public string UIDeleteHyperlinkId = "DeleteButton";
        
        /// <summary>
        /// Verify that the 'Id' property of 'Delete' link equals 'DeleteButton'
        /// </summary>
        public string UIDeleteHyperlinkId1 = "DeleteButton";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DetailsViewHasProperValuesAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DetailsViewHasProperValuesAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Maria' custom control equals 'Maria '
        /// </summary>
        public string UIMariaCustomInnerText = "Maria ";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'Klimek' custom control equals 'Klimek '
        /// </summary>
        public string UIKlimekCustomInnerText = "Klimek ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToProductsPageWhenNotLogged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class GoToProductsPageWhenNotLoggedParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://localhost:44336/' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "https://localhost:44336/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ProductsViewHasProperTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ProductsViewHasProperTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Products Name Price Quantit' pane contains 'Products'
        /// </summary>
        public string UIProductsNamePriceQuaPaneInnerText = "Products";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToCustomerPageWhenNotLogged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class GoToCustomerPageWhenNotLoggedParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://localhost:44336/' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "https://localhost:44336/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginTitleAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginTitleAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Log in Use a local account to' pane contains 'Log in'
        /// </summary>
        public string UILoginUsealocalaccounPaneInnerText = "Log in";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DoEverything'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DoEverythingParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'about:NewsFeed' using new browser instance
        /// </summary>
        public string UINowakartaInternetExpWindowUrl = "about:NewsFeed";
        
        /// <summary>
        /// Go to web page 'https://localhost:44336/'
        /// </summary>
        public string UINowakartaInternetExpWindowUrl1 = "https://localhost:44336/";
        
        /// <summary>
        /// Type 'testtest@wp.pl' in 'Email' text box
        /// </summary>
        public string UIEmailEdit1Text = "testtest@wp.pl";
        
        /// <summary>
        /// Type '{Tab}' in 'Email' text box
        /// </summary>
        public string UIEmailEdit1SendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEdit1Password = "2i0aJgnclXUV3DmV4e4O7xW5BU5jtb2z";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINowakartaInternetExpWindow : BrowserWindow
    {
        
        public UINowakartaInternetExpWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Nowa karta";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Nowa karta");
            this.WindowTitles.Add("FlowerShop - Flower");
            this.WindowTitles.Add("Log in - Flower");
            this.WindowTitles.Add("https://localhost:44336/");
            this.WindowTitles.Add("Register - Flower");
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIFlowerShopFlowerDocument UIFlowerShopFlowerDocument
        {
            get
            {
                if ((this.mUIFlowerShopFlowerDocument == null))
                {
                    this.mUIFlowerShopFlowerDocument = new UIFlowerShopFlowerDocument(this);
                }
                return this.mUIFlowerShopFlowerDocument;
            }
        }
        
        public UILoginFlowerDocument UILoginFlowerDocument
        {
            get
            {
                if ((this.mUILoginFlowerDocument == null))
                {
                    this.mUILoginFlowerDocument = new UILoginFlowerDocument(this);
                }
                return this.mUILoginFlowerDocument;
            }
        }
        
        public UIRegisterFlowerDocument UIRegisterFlowerDocument
        {
            get
            {
                if ((this.mUIRegisterFlowerDocument == null))
                {
                    this.mUIRegisterFlowerDocument = new UIRegisterFlowerDocument(this);
                }
                return this.mUIRegisterFlowerDocument;
            }
        }
        
        public UINowakartaDocument UINowakartaDocument
        {
            get
            {
                if ((this.mUINowakartaDocument == null))
                {
                    this.mUINowakartaDocument = new UINowakartaDocument(this);
                }
                return this.mUINowakartaDocument;
            }
        }
        
        public UICustomersFlowerDocument UICustomersFlowerDocument
        {
            get
            {
                if ((this.mUICustomersFlowerDocument == null))
                {
                    this.mUICustomersFlowerDocument = new UICustomersFlowerDocument(this);
                }
                return this.mUICustomersFlowerDocument;
            }
        }
        
        public UILoginFlowerDocument1 UILoginFlowerDocument1
        {
            get
            {
                if ((this.mUILoginFlowerDocument1 == null))
                {
                    this.mUILoginFlowerDocument1 = new UILoginFlowerDocument1(this);
                }
                return this.mUILoginFlowerDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIFlowerShopFlowerDocument mUIFlowerShopFlowerDocument;
        
        private UILoginFlowerDocument mUILoginFlowerDocument;
        
        private UIRegisterFlowerDocument mUIRegisterFlowerDocument;
        
        private UINowakartaDocument mUINowakartaDocument;
        
        private UICustomersFlowerDocument mUICustomersFlowerDocument;
        
        private UILoginFlowerDocument1 mUILoginFlowerDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFlowerShopFlowerDocument : HtmlDocument
    {
        
        public UIFlowerShopFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "FlowerShop - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/";
            this.WindowTitles.Add("FlowerShop - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIWelcomestrangerPleasPane
        {
            get
            {
                if ((this.mUIWelcomestrangerPleasPane == null))
                {
                    this.mUIWelcomestrangerPleasPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIWelcomestrangerPleasPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIWelcomestrangerPleasPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIWelcomestrangerPleasPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Welcome stranger!\r\n\r\nPlease log in, if y";
                    this.mUIWelcomestrangerPleasPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIWelcomestrangerPleasPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "row";
                    this.mUIWelcomestrangerPleasPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"row\"";
                    this.mUIWelcomestrangerPleasPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "13";
                    this.mUIWelcomestrangerPleasPane.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUIWelcomestrangerPleasPane;
            }
        }
        
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "LoginButton";
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log in";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/account/login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/account/login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"LoginButton\" href=\"/account/login\"";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUILoginHyperlink.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        
        public HtmlDiv UIHurraLoggedastesttesPane
        {
            get
            {
                if ((this.mUIHurraLoggedastesttesPane == null))
                {
                    this.mUIHurraLoggedastesttesPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIHurraLoggedastesttesPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIHurraLoggedastesttesPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIHurraLoggedastesttesPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Hurra!\r\n\r\nLogged as testtest@wp.pl!\r\n\r\nN";
                    this.mUIHurraLoggedastesttesPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIHurraLoggedastesttesPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "row";
                    this.mUIHurraLoggedastesttesPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"row\"";
                    this.mUIHurraLoggedastesttesPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "13";
                    this.mUIHurraLoggedastesttesPane.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUIHurraLoggedastesttesPane;
            }
        }
        
        public HtmlHyperlink UIRegisterHyperlink
        {
            get
            {
                if ((this.mUIRegisterHyperlink == null))
                {
                    this.mUIRegisterHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "RegisterButton";
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIRegisterHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Register";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/account/register";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/account/register";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"RegisterButton\" href=\"/account/regis";
                    this.mUIRegisterHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIRegisterHyperlink.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUIRegisterHyperlink;
            }
        }
        
        public HtmlDiv UIHurraLoggedastojuzzdPane
        {
            get
            {
                if ((this.mUIHurraLoggedastojuzzdPane == null))
                {
                    this.mUIHurraLoggedastojuzzdPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIHurraLoggedastojuzzdPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIHurraLoggedastojuzzdPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIHurraLoggedastojuzzdPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Hurra!\r\n\r\nLogged as tojuzzdecydowanieost";
                    this.mUIHurraLoggedastojuzzdPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIHurraLoggedastojuzzdPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "row";
                    this.mUIHurraLoggedastojuzzdPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"row\"";
                    this.mUIHurraLoggedastojuzzdPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "13";
                    this.mUIHurraLoggedastojuzzdPane.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUIHurraLoggedastojuzzdPane;
            }
        }
        
        public HtmlHyperlink UISellersHyperlink
        {
            get
            {
                if ((this.mUISellersHyperlink == null))
                {
                    this.mUISellersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUISellersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "Sellers";
                    this.mUISellersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUISellersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUISellersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Sellers";
                    this.mUISellersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/seller";
                    this.mUISellersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUISellersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/seller";
                    this.mUISellersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUISellersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"Sellers\" href=\"/seller\"";
                    this.mUISellersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUISellersHyperlink.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUISellersHyperlink;
            }
        }
        
        public HtmlHyperlink UICustomersHyperlink
        {
            get
            {
                if ((this.mUICustomersHyperlink == null))
                {
                    this.mUICustomersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "Customers";
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/customer";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/customer";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"Customers\" href=\"/customer\"";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUICustomersHyperlink.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUICustomersHyperlink;
            }
        }
        
        public HtmlHyperlink UIProductsHyperlink
        {
            get
            {
                if ((this.mUIProductsHyperlink == null))
                {
                    this.mUIProductsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "Products";
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIProductsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Products";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/product";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/product";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"Products\" href=\"/product\"";
                    this.mUIProductsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIProductsHyperlink.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUIProductsHyperlink;
            }
        }
        
        public UILogoutFormCustom UILogoutFormCustom
        {
            get
            {
                if ((this.mUILogoutFormCustom == null))
                {
                    this.mUILogoutFormCustom = new UILogoutFormCustom(this);
                }
                return this.mUILogoutFormCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIWelcomestrangerPleasPane;
        
        private HtmlHyperlink mUILoginHyperlink;
        
        private HtmlDiv mUIHurraLoggedastesttesPane;
        
        private HtmlHyperlink mUIRegisterHyperlink;
        
        private HtmlDiv mUIHurraLoggedastojuzzdPane;
        
        private HtmlHyperlink mUISellersHyperlink;
        
        private HtmlHyperlink mUICustomersHyperlink;
        
        private HtmlHyperlink mUIProductsHyperlink;
        
        private UILogoutFormCustom mUILogoutFormCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILogoutFormCustom : HtmlCustom
    {
        
        public UILogoutFormCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "logoutForm";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = "navbar-right";
            this.FilterProperties["ControlDefinition"] = "class=\"navbar-right\" id=\"logoutForm\" act";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("FlowerShop - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log out";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-link navbar-btn navbar-link";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-link navbar-btn navbar-li";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUILogoutButton.WindowTitles.Add("FlowerShop - Flower");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginFlowerDocument : HtmlDocument
    {
        
        public UILoginFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/account/login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/account/login";
            this.WindowTitles.Add("Log in - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Login";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log in";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"Login\" type=";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILoginButton.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public HtmlSpan UITheEmailfieldisrequiPane
        {
            get
            {
                if ((this.mUITheEmailfieldisrequiPane == null))
                {
                    this.mUITheEmailfieldisrequiPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUITheEmailfieldisrequiPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "Email-error";
                    this.mUITheEmailfieldisrequiPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUITheEmailfieldisrequiPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "The Email field is required.";
                    this.mUITheEmailfieldisrequiPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUITheEmailfieldisrequiPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUITheEmailfieldisrequiPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"Email-error\"";
                    this.mUITheEmailfieldisrequiPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
                    this.mUITheEmailfieldisrequiPane.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUITheEmailfieldisrequiPane;
            }
        }
        
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control input-validation-error";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control input-v";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control input-validation-error";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"form-control inpu";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlEdit UIEmailEdit1
        {
            get
            {
                if ((this.mUIEmailEdit1 == null))
                {
                    this.mUIEmailEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "Email";
                    this.mUIEmailEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control\" id=\"Em";
                    this.mUIEmailEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit1.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUIEmailEdit1;
            }
        }
        
        public HtmlEdit UIPasswordEdit1
        {
            get
            {
                if ((this.mUIPasswordEdit1 == null))
                {
                    this.mUIPasswordEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"form-control\" id=";
                    this.mUIPasswordEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit1.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUIPasswordEdit1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUILoginButton;
        
        private HtmlSpan mUITheEmailfieldisrequiPane;
        
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlEdit mUIEmailEdit1;
        
        private HtmlEdit mUIPasswordEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRegisterFlowerDocument : HtmlDocument
    {
        
        public UIRegisterFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Register - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/account/register";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/account/register";
            this.WindowTitles.Add("Register - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "EmailInput";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control\" id=\"Em";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Register - Flower");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "PasswordInput";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"form-control\" id=";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Register - Flower");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlEdit UIConfirmPasswordEdit
        {
            get
            {
                if ((this.mUIConfirmPasswordEdit == null))
                {
                    this.mUIConfirmPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIConfirmPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ConfirmPasswordInput";
                    this.mUIConfirmPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ConfirmPassword";
                    this.mUIConfirmPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIConfirmPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIConfirmPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIConfirmPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIConfirmPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"ConfirmPassword\" class=\"form-contr";
                    this.mUIConfirmPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIConfirmPasswordEdit.WindowTitles.Add("Register - Flower");
                    #endregion
                }
                return this.mUIConfirmPasswordEdit;
            }
        }
        
        public HtmlButton UIRegisterButton
        {
            get
            {
                if ((this.mUIRegisterButton == null))
                {
                    this.mUIRegisterButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Id] = "Register";
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Register";
                    this.mUIRegisterButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"Register\" ty";
                    this.mUIRegisterButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIRegisterButton.WindowTitles.Add("Register - Flower");
                    #endregion
                }
                return this.mUIRegisterButton;
            }
        }
        
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "UL";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "3";
                    this.mUIItemCustom.WindowTitles.Add("Register - Flower");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlEdit mUIConfirmPasswordEdit;
        
        private HtmlButton mUIRegisterButton;
        
        private HtmlCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINowakartaDocument : HtmlDocument
    {
        
        public UINowakartaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Nowa karta";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/spartan/ientp";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://www.msn.com/spartan/ientp?locale=pl-PL&market=PL&enableregulatorypsm=0&NT" +
                "Logo=1&IsFRE=0";
            this.WindowTitles.Add("Nowa karta");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIMaincontentPane
        {
            get
            {
                if ((this.mUIMaincontentPane == null))
                {
                    this.mUIMaincontentPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIMaincontentPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "maincontent";
                    this.mUIMaincontentPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMaincontentPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Najpopularniejsze strony\r\n  Ukryj kanał ";
                    this.mUIMaincontentPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMaincontentPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIMaincontentPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"maincontent\" data-m=\'{\"i\":10,\"n\":\"main\",\"y\":6}\' data-id=\"10\"";
                    this.mUIMaincontentPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "8";
                    this.mUIMaincontentPane.WindowTitles.Add("Nowa karta");
                    #endregion
                }
                return this.mUIMaincontentPane;
            }
        }
        
        public HtmlCustom UIJstopsitesCustom
        {
            get
            {
                if ((this.mUIJstopsitesCustom == null))
                {
                    this.mUIJstopsitesCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIJstopsitesCustom.SearchProperties["TagName"] = "UL";
                    this.mUIJstopsitesCustom.SearchProperties["Id"] = "js-topsites";
                    this.mUIJstopsitesCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIJstopsitesCustom.FilterProperties["Class"] = "has-curated";
                    this.mUIJstopsitesCustom.FilterProperties["ControlDefinition"] = "class=\"has-curated\" id=\"js-topsites\" dat";
                    this.mUIJstopsitesCustom.FilterProperties["TagInstance"] = "3";
                    this.mUIJstopsitesCustom.WindowTitles.Add("Nowa karta");
                    #endregion
                }
                return this.mUIJstopsitesCustom;
            }
        }
        
        public UISectionappstopsiteshCustom UISectionappstopsiteshCustom
        {
            get
            {
                if ((this.mUISectionappstopsiteshCustom == null))
                {
                    this.mUISectionappstopsiteshCustom = new UISectionappstopsiteshCustom(this);
                }
                return this.mUISectionappstopsiteshCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIMaincontentPane;
        
        private HtmlCustom mUIJstopsitesCustom;
        
        private UISectionappstopsiteshCustom mUISectionappstopsiteshCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISectionappstopsiteshCustom : HtmlCustom
    {
        
        public UISectionappstopsiteshCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "SECTION";
            this.SearchProperties["Id"] = "section.apps.topsites-headingtext";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = "topsites";
            this.FilterProperties["ControlDefinition"] = "class=\"topsites\" id=\"section.apps.topsit";
            this.FilterProperties["TagInstance"] = "2";
            this.WindowTitles.Add("Nowa karta");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UINajpopularniejszestrPane
        {
            get
            {
                if ((this.mUINajpopularniejszestrPane == null))
                {
                    this.mUINajpopularniejszestrPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUINajpopularniejszestrPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUINajpopularniejszestrPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUINajpopularniejszestrPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Najpopularniejsze strony\r\n  Ukryj kanał ";
                    this.mUINajpopularniejszestrPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUINajpopularniejszestrPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectionheader";
                    this.mUINajpopularniejszestrPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"sectionheader\"";
                    this.mUINajpopularniejszestrPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "14";
                    this.mUINajpopularniejszestrPane.WindowTitles.Add("Nowa karta");
                    #endregion
                }
                return this.mUINajpopularniejszestrPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUINajpopularniejszestrPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICustomersFlowerDocument : HtmlDocument
    {
        
        public UICustomersFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Customers - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/customer";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/customer";
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UISearchStringEdit
        {
            get
            {
                if ((this.mUISearchStringEdit == null))
                {
                    this.mUISearchStringEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SearchString";
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"SearchString\" type=\"text\"";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUISearchStringEdit.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUISearchStringEdit;
            }
        }
        
        public HtmlInputButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.Id] = "SearchButton";
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Search";
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-success btn-sm";
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-success btn-sm\" id=\"Searc";
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUISearchButton.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "EditButton";
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/customer/edit/4";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/customer/edit/4";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-success btn-sm";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-success btn-sm\" id=\"EditB";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIEditHyperlink.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "DetailsButton";
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/customer/details/4";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/customer/details/4";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-success btn-sm";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-success btn-sm\" id=\"Detai";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "10";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "DeleteButton";
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/customer/delete/4";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44336/customer/delete/4";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-success btn-sm";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-success btn-sm\" id=\"Delet";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUISearchStringEdit;
        
        private HtmlInputButton mUISearchButton;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginFlowerDocument1 : HtmlDocument
    {
        
        public UILoginFlowerDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/Account/Login?ReturnUrl=%2Fcustomer";
            this.WindowTitles.Add("Log in - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UILoginUsealocalaccounPane
        {
            get
            {
                if ((this.mUILoginUsealocalaccounPane == null))
                {
                    this.mUILoginUsealocalaccounPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUILoginUsealocalaccounPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUILoginUsealocalaccounPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUILoginUsealocalaccounPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Log in\r\n\r\n\r\n\r\n\r\n\r\nUse a local account to";
                    this.mUILoginUsealocalaccounPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUILoginUsealocalaccounPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container body-content";
                    this.mUILoginUsealocalaccounPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container body-content\"";
                    this.mUILoginUsealocalaccounPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUILoginUsealocalaccounPane.WindowTitles.Add("Log in - Flower");
                    #endregion
                }
                return this.mUILoginUsealocalaccounPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUILoginUsealocalaccounPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAccessdeniedFlowerInWindow : BrowserWindow
    {
        
        public UIAccessdeniedFlowerInWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Access denied - Flower";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Access denied - Flower");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAccessdeniedFlowerDocument UIAccessdeniedFlowerDocument
        {
            get
            {
                if ((this.mUIAccessdeniedFlowerDocument == null))
                {
                    this.mUIAccessdeniedFlowerDocument = new UIAccessdeniedFlowerDocument(this);
                }
                return this.mUIAccessdeniedFlowerDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIAccessdeniedFlowerDocument mUIAccessdeniedFlowerDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAccessdeniedFlowerDocument : HtmlDocument
    {
        
        public UIAccessdeniedFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Access denied - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/AccessDenied";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/Account/AccessDenied?ReturnUrl=%2Fseller";
            this.WindowTitles.Add("Access denied - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "HEADER";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("Access denied - Flower");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICustomersFlowerInterWindow : BrowserWindow
    {
        
        public UICustomersFlowerInterWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Customers - Flower";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomersFlowerDocument1 UICustomersFlowerDocument
        {
            get
            {
                if ((this.mUICustomersFlowerDocument == null))
                {
                    this.mUICustomersFlowerDocument = new UICustomersFlowerDocument1(this);
                }
                return this.mUICustomersFlowerDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomersFlowerDocument1 mUICustomersFlowerDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICustomersFlowerDocument1 : HtmlDocument
    {
        
        public UICustomersFlowerDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Customers - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/customer";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/customer?SearchString=gol";
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Name \r\n\r\nSurname \r\n\r\nPhone \r\n\r\nEmail \r\n\r";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "3";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIGolonkaCell
        {
            get
            {
                if ((this.mUIGolonkaCell == null))
                {
                    this.mUIGolonkaCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIGolonkaCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIGolonkaCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIGolonkaCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIGolonkaCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Golonka ";
                    this.mUIGolonkaCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIGolonkaCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUIGolonkaCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIGolonkaCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIGolonkaCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
                    this.mUIGolonkaCell.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUIGolonkaCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIGolonkaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICustomersFlowerInterWindow1 : BrowserWindow
    {
        
        public UICustomersFlowerInterWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Customers - Flower";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomersFlowerDocument2 UICustomersFlowerDocument
        {
            get
            {
                if ((this.mUICustomersFlowerDocument == null))
                {
                    this.mUICustomersFlowerDocument = new UICustomersFlowerDocument2(this);
                }
                return this.mUICustomersFlowerDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomersFlowerDocument2 mUICustomersFlowerDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICustomersFlowerDocument2 : HtmlDocument
    {
        
        public UICustomersFlowerDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Customers - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/customer";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/customer?SearchString=";
            this.WindowTitles.Add("Customers - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UISearchStringEdit
        {
            get
            {
                if ((this.mUISearchStringEdit == null))
                {
                    this.mUISearchStringEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SearchString";
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUISearchStringEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"SearchString\" type=\"text\"";
                    this.mUISearchStringEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUISearchStringEdit.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUISearchStringEdit;
            }
        }
        
        public HtmlInputButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.Id] = "SearchButton";
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Search";
                    this.mUISearchButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-success btn-sm";
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-success btn-sm\" id=\"Searc";
                    this.mUISearchButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUISearchButton.WindowTitles.Add("Customers - Flower");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUISearchStringEdit;
        
        private HtmlInputButton mUISearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsFlowerInterneWindow : BrowserWindow
    {
        
        public UIDetailsFlowerInterneWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Details - Flower";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Details - Flower");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIDetailsFlowerDocument UIDetailsFlowerDocument
        {
            get
            {
                if ((this.mUIDetailsFlowerDocument == null))
                {
                    this.mUIDetailsFlowerDocument = new UIDetailsFlowerDocument(this);
                }
                return this.mUIDetailsFlowerDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsFlowerDocument mUIDetailsFlowerDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsFlowerDocument : HtmlDocument
    {
        
        public UIDetailsFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/customer/details/4";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/customer/details/4";
            this.WindowTitles.Add("Details - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIMariaCustom
        {
            get
            {
                if ((this.mUIMariaCustom == null))
                {
                    this.mUIMariaCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIMariaCustom.SearchProperties["TagName"] = "DD";
                    this.mUIMariaCustom.SearchProperties["Id"] = "ModelName";
                    this.mUIMariaCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIMariaCustom.FilterProperties["Class"] = null;
                    this.mUIMariaCustom.FilterProperties["ControlDefinition"] = "id=\"ModelName\"";
                    this.mUIMariaCustom.FilterProperties["InnerText"] = "Maria ";
                    this.mUIMariaCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIMariaCustom.WindowTitles.Add("Details - Flower");
                    #endregion
                }
                return this.mUIMariaCustom;
            }
        }
        
        public HtmlCustom UIKlimekCustom
        {
            get
            {
                if ((this.mUIKlimekCustom == null))
                {
                    this.mUIKlimekCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIKlimekCustom.SearchProperties["TagName"] = "DD";
                    this.mUIKlimekCustom.SearchProperties["Id"] = "ModelSurname";
                    this.mUIKlimekCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIKlimekCustom.FilterProperties["Class"] = null;
                    this.mUIKlimekCustom.FilterProperties["ControlDefinition"] = "id=\"ModelSurname\"";
                    this.mUIKlimekCustom.FilterProperties["InnerText"] = "Klimek ";
                    this.mUIKlimekCustom.FilterProperties["TagInstance"] = "2";
                    this.mUIKlimekCustom.WindowTitles.Add("Details - Flower");
                    #endregion
                }
                return this.mUIKlimekCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIMariaCustom;
        
        private HtmlCustom mUIKlimekCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProductsFlowerInternWindow : BrowserWindow
    {
        
        public UIProductsFlowerInternWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Products - Flower";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Products - Flower");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIProductsFlowerDocument UIProductsFlowerDocument
        {
            get
            {
                if ((this.mUIProductsFlowerDocument == null))
                {
                    this.mUIProductsFlowerDocument = new UIProductsFlowerDocument(this);
                }
                return this.mUIProductsFlowerDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIProductsFlowerDocument mUIProductsFlowerDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProductsFlowerDocument : HtmlDocument
    {
        
        public UIProductsFlowerDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Products - Flower";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/product";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44336/product";
            this.WindowTitles.Add("Products - Flower");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIProductsNamePriceQuaPane
        {
            get
            {
                if ((this.mUIProductsNamePriceQuaPane == null))
                {
                    this.mUIProductsNamePriceQuaPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIProductsNamePriceQuaPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIProductsNamePriceQuaPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIProductsNamePriceQuaPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Products\r\n\r\n\r\nName \r\n\r\nPrice \r\n\r\nQuantit";
                    this.mUIProductsNamePriceQuaPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIProductsNamePriceQuaPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container body-content";
                    this.mUIProductsNamePriceQuaPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container body-content\"";
                    this.mUIProductsNamePriceQuaPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUIProductsNamePriceQuaPane.WindowTitles.Add("Products - Flower");
                    #endregion
                }
                return this.mUIProductsNamePriceQuaPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIProductsNamePriceQuaPane;
        #endregion
    }
}
